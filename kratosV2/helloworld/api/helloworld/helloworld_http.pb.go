// Code generated by protoc-gen-go-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type HelloworldHandler interface {
	CreateHelloworld(context.Context, *CreateHelloworldRequest) (*CreateHelloworldReply, error)

	DeleteHelloworld(context.Context, *DeleteHelloworldRequest) (*DeleteHelloworldReply, error)

	GetHelloworld(context.Context, *GetHelloworldRequest) (*GetHelloworldReply, error)

	ListHelloworld(context.Context, *ListHelloworldRequest) (*ListHelloworldReply, error)

	UpdateHelloworld(context.Context, *UpdateHelloworldRequest) (*UpdateHelloworldReply, error)
}

func NewHelloworldHandler(srv HelloworldHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/api.helloworld.Helloworld/CreateHelloworld", func(w http.ResponseWriter, r *http.Request) {
		var in CreateHelloworldRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHelloworld(ctx, req.(*CreateHelloworldRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateHelloworldReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.helloworld.Helloworld/UpdateHelloworld", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateHelloworldRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHelloworld(ctx, req.(*UpdateHelloworldRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateHelloworldReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.helloworld.Helloworld/DeleteHelloworld", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteHelloworldRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHelloworld(ctx, req.(*DeleteHelloworldRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteHelloworldReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.helloworld.Helloworld/GetHelloworld", func(w http.ResponseWriter, r *http.Request) {
		var in GetHelloworldRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHelloworld(ctx, req.(*GetHelloworldRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetHelloworldReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/api.helloworld.Helloworld/ListHelloworld", func(w http.ResponseWriter, r *http.Request) {
		var in ListHelloworldRequest
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHelloworld(ctx, req.(*ListHelloworldRequest))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListHelloworldReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type HelloworldHTTPClient interface {
	CreateHelloworld(ctx context.Context, req *CreateHelloworldRequest, opts ...http1.CallOption) (rsp *CreateHelloworldReply, err error)

	DeleteHelloworld(ctx context.Context, req *DeleteHelloworldRequest, opts ...http1.CallOption) (rsp *DeleteHelloworldReply, err error)

	GetHelloworld(ctx context.Context, req *GetHelloworldRequest, opts ...http1.CallOption) (rsp *GetHelloworldReply, err error)

	ListHelloworld(ctx context.Context, req *ListHelloworldRequest, opts ...http1.CallOption) (rsp *ListHelloworldReply, err error)

	UpdateHelloworld(ctx context.Context, req *UpdateHelloworldRequest, opts ...http1.CallOption) (rsp *UpdateHelloworldReply, err error)
}

type HelloworldHTTPClientImpl struct {
	cc *http1.Client
}

func NewHelloworldHTTPClient(client *http1.Client) HelloworldHTTPClient {
	return &HelloworldHTTPClientImpl{client}
}

func (c *HelloworldHTTPClientImpl) CreateHelloworld(ctx context.Context, in *CreateHelloworldRequest, opts ...http1.CallOption) (out *CreateHelloworldReply, err error) {
	path := binding.EncodePath("POST", "/api.helloworld.Helloworld/CreateHelloworld", in)
	out = &CreateHelloworldReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.helloworld.Helloworld/CreateHelloworld"))

	if err != nil {
		return
	}
	return
}

func (c *HelloworldHTTPClientImpl) DeleteHelloworld(ctx context.Context, in *DeleteHelloworldRequest, opts ...http1.CallOption) (out *DeleteHelloworldReply, err error) {
	path := binding.EncodePath("POST", "/api.helloworld.Helloworld/DeleteHelloworld", in)
	out = &DeleteHelloworldReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.helloworld.Helloworld/DeleteHelloworld"))

	if err != nil {
		return
	}
	return
}

func (c *HelloworldHTTPClientImpl) GetHelloworld(ctx context.Context, in *GetHelloworldRequest, opts ...http1.CallOption) (out *GetHelloworldReply, err error) {
	path := binding.EncodePath("POST", "/api.helloworld.Helloworld/GetHelloworld", in)
	out = &GetHelloworldReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.helloworld.Helloworld/GetHelloworld"))

	if err != nil {
		return
	}
	return
}

func (c *HelloworldHTTPClientImpl) ListHelloworld(ctx context.Context, in *ListHelloworldRequest, opts ...http1.CallOption) (out *ListHelloworldReply, err error) {
	path := binding.EncodePath("POST", "/api.helloworld.Helloworld/ListHelloworld", in)
	out = &ListHelloworldReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.helloworld.Helloworld/ListHelloworld"))

	if err != nil {
		return
	}
	return
}

func (c *HelloworldHTTPClientImpl) UpdateHelloworld(ctx context.Context, in *UpdateHelloworldRequest, opts ...http1.CallOption) (out *UpdateHelloworldReply, err error) {
	path := binding.EncodePath("POST", "/api.helloworld.Helloworld/UpdateHelloworld", in)
	out = &UpdateHelloworldReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/api.helloworld.Helloworld/UpdateHelloworld"))

	if err != nil {
		return
	}
	return
}
